// Copyright 2017, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat/protos/chat.proto
#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = Google.Protobuf;
using pbr = Google.Protobuf.Reflection;

namespace Com.Example.Grpc.Chat
{
    /// <summary>Holder for reflection information generated from Chat/protos/chat.proto</summary>
    public static partial class ChatReflection
    {
        #region Descriptor

        /// <summary>File descriptor for Chat/protos/chat.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static pbr::FileDescriptor descriptor;

        static ChatReflection()
        {
            byte[] descriptorData = System.Convert.FromBase64String(
                string.Concat(
                  "ChZDaGF0L3Byb3Rvcy9jaGF0LnByb3RvEhVjb20uZXhhbXBsZS5ncnBjLmNo",
                  "YXQiLAoLQ2hhdE1lc3NhZ2USDAoEZnJvbRgBIAEoCRIPCgdtZXNzYWdlGAIg",
                  "ASgJIkwKFUNoYXRNZXNzYWdlRnJvbVNlcnZlchIzCgdtZXNzYWdlGAIgASgL",
                  "MiIuY29tLmV4YW1wbGUuZ3JwYy5jaGF0LkNoYXRNZXNzYWdlMmsKC0NoYXRT",
                  "ZXJ2aWNlElwKBGNoYXQSIi5jb20uZXhhbXBsZS5ncnBjLmNoYXQuQ2hhdE1l",
                  "c3NhZ2UaLC5jb20uZXhhbXBsZS5ncnBjLmNoYXQuQ2hhdE1lc3NhZ2VGcm9t",
                  "U2VydmVyKAEwAWIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(ChatMessage), ChatMessage.Parser, new[]{ "From", "Message", "Id", "Fullname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(ChatMessageFromServer), ChatMessageFromServer.Parser, new[]{ "Message" }, null, null, null)
                }));
        }

        #endregion Descriptor
    }

    #region Messages

    public sealed partial class ChatMessage : pb::IMessage<ChatMessage>
    {
        private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());

        [System.Diagnostics.DebuggerNonUserCode]
        public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCode]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return ChatReflection.Descriptor.MessageTypes[0]; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public ChatMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCode]
        public ChatMessage(ChatMessage other) : this()
        {
            id = other.id;
            _fullname = other._fullname;
            from_ = other.from_;
            message_ = other.message_;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public ChatMessage Clone()
        {
            return new ChatMessage(this);
        }

        public const int IDFieldNumber = 3;

        private string id = "";

        [System.Diagnostics.DebuggerNonUserCode]
        public string Id
        {
            get { return id; }
            set
            {
                id = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        public const int FullnameFieldNumber = 4;

        private string _fullname = "";

        [System.Diagnostics.DebuggerNonUserCode]
        public string Fullname
        {
            get { return _fullname; }
            set
            {
                _fullname = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "from" field.</summary>
        public const int FromFieldNumber = 1;

        private string from_ = "";

        [System.Diagnostics.DebuggerNonUserCode]
        public string From
        {
            get { return from_; }
            set
            {
                from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;

        private string message_ = "";

        [System.Diagnostics.DebuggerNonUserCode]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override bool Equals(object other)
        {
            return Equals(other as ChatMessage);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public bool Equals(ChatMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (From != other.From) return false;
            if (Message != other.Message) return false;
            if (Id != other.Id) return false;
            if (Fullname != other.Fullname) return false;
            return true;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override int GetHashCode()
        {
            int hash = 1;
            if (From.Length != 0) hash ^= From.GetHashCode();
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (Fullname.Length != 0) hash ^= Fullname.GetHashCode();
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (From.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(From);
            }
            if (Message.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Message);
            }

            if (Id.Length != 0)
            {
                output.WriteRawTag(11);
                output.WriteString(Id);
            }
            if (Fullname.Length != 0)
            {
                output.WriteRawTag(19);
                output.WriteString(Fullname);
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public int CalculateSize()
        {
            int size = 0;
            if (From.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
            }
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (Fullname.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Fullname);
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(ChatMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.From.Length != 0)
            {
                From = other.From;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.Fullname.Length != 0)
            {
                Fullname = other.Fullname;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 10:
                        {
                            From = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Message = input.ReadString();
                            break;
                        }
                    case 11:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 19:
                        {
                            Fullname = input.ReadString();
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class ChatMessageFromServer : pb::IMessage<ChatMessageFromServer>
    {
        private static readonly pb::MessageParser<ChatMessageFromServer> _parser = new pb::MessageParser<ChatMessageFromServer>(() => new ChatMessageFromServer());

        [System.Diagnostics.DebuggerNonUserCode]
        public static pb::MessageParser<ChatMessageFromServer> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCode]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return ChatReflection.Descriptor.MessageTypes[1]; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public ChatMessageFromServer()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCode]
        public ChatMessageFromServer(ChatMessageFromServer other) : this()
        {
            Message = other.message_ != null ? other.Message.Clone() : null;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public ChatMessageFromServer Clone()
        {
            return new ChatMessageFromServer(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;

        private ChatMessage message_;

        /// <summary>
        /// google.protobuf.Timestamp timestamp = 1;
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public ChatMessage Message
        {
            get { return message_; }
            set
            {
                message_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override bool Equals(object other)
        {
            return Equals(other as ChatMessageFromServer);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public bool Equals(ChatMessageFromServer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!Equals(Message, other.Message)) return false;
            return true;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override int GetHashCode()
        {
            int hash = 1;
            if (message_ != null) hash ^= Message.GetHashCode();
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (message_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Message);
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public int CalculateSize()
        {
            int size = 0;
            if (message_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(ChatMessageFromServer other)
        {
            if (other == null)
            {
                return;
            }
            if (other.message_ != null)
            {
                if (message_ == null)
                {
                    message_ = new ChatMessage();
                }
                Message.MergeFrom(other.Message);
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 18:
                        {
                            if (message_ == null)
                            {
                                message_ = new ChatMessage();
                            }
                            input.ReadMessage(message_);
                            break;
                        }
                }
            }
        }
    }

    #endregion Messages
}

#endregion Designer generated code